"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationError_1 = __importDefault(require("../lib/ValidationError"));
var validationHelper = __importStar(require("../lib/validation.helper"));
describe('ValidationHelper', function () {
    describe('withProperties', function () {
        it('throw error on undefined properties', function () {
            expect(function () {
                validationHelper.withProperties({ a: 'a', b: 'b', c: 'c' }, ['b', 'd', 'e']);
            }).toThrow(/Validated object doesn't have properties: d,e/);
        });
        it('do not throw error on defined properties', function () {
            validationHelper.withProperties({ a: 'a', b: 'b', c: 'c' }, ['a', 'b', 'c']);
            validationHelper.withProperties({ a: 'a', b: 'b', c: 'c' }, ['b']);
            validationHelper.withProperties({ a: 'a', b: 'b', c: 'c' }, []);
        });
    });
    describe('truthy', function () {
        it('throw error on not truthy values', function () {
            expect(function () {
                validationHelper.truthy(false);
            }).toThrow(/Validated object is not truthy/);
            expect(function () {
                validationHelper.truthy(undefined);
            }).toThrow(/Validated object is not truthy/);
            expect(function () {
                validationHelper.truthy(NaN);
            }).toThrow(/Validated object is not truthy/);
            expect(function () {
                validationHelper.truthy(0);
            }).toThrow(/Validated object is not truthy/);
            expect(function () {
                validationHelper.truthy('');
            }).toThrow(/Validated object is not truthy/);
        });
        it('do not throw error on truthy values', function () {
            validationHelper.truthy(true);
            validationHelper.truthy({});
            validationHelper.truthy(1);
            validationHelper.truthy(-1);
            validationHelper.truthy(' ');
            validationHelper.truthy('a');
        });
    });
    describe('falsy', function () {
        it('throw error on not falsy values', function () {
            expect(function () {
                validationHelper.falsy(true);
            }).toThrow(/Validated object is not falsy/);
            expect(function () {
                validationHelper.falsy({});
            }).toThrow(/Validated object is not falsy/);
            expect(function () {
                validationHelper.falsy(1);
            }).toThrow(/Validated object is not falsy/);
            expect(function () {
                validationHelper.falsy(-1);
            }).toThrow(/Validated object is not falsy/);
            expect(function () {
                validationHelper.falsy(' ');
            }).toThrow(/Validated object is not falsy/);
            expect(function () {
                validationHelper.falsy('a');
            }).toThrow(/Validated object is not falsy/);
        });
        it('do not throw error on falsy values', function () {
            validationHelper.falsy(false);
            validationHelper.falsy(undefined);
            validationHelper.falsy(NaN);
            validationHelper.falsy(0);
            validationHelper.falsy('');
        });
    });
    describe('booleanTrue', function () {
        it('throw error on not True values', function () {
            expect(function () {
                validationHelper.booleanTrue(false);
            }).toThrow(/Validated object is not True/);
            expect(function () {
                validationHelper.booleanTrue({});
            }).toThrow(/Validated object is not True/);
            expect(function () {
                validationHelper.booleanTrue(1);
            }).toThrow(/Validated object is not True/);
        });
        it('do not throw error on True values', function () {
            validationHelper.booleanTrue(true);
        });
    });
    describe('date', function () {
        it('throw error on not Date values', function () {
            expect(function () {
                validationHelper.date(false);
            }).toThrow(/Validated object is not Date/);
            expect(function () {
                validationHelper.date({});
            }).toThrow(/Validated object is not Date/);
            expect(function () {
                validationHelper.date(1);
            }).toThrow(/Validated object is not Date/);
        });
        it('do not throw error on Date values', function () {
            validationHelper.date(new Date());
        });
    });
    describe('booleanNonStrict', function () {
        it('throw error on not non-strict boolean values', function () {
            expect(function () {
                validationHelper.boolean_('0');
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.boolean_({});
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.boolean_('tru');
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.boolean_('true');
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.boolean_('TRUE');
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.boolean_('false');
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.boolean_('FALSE');
            }).toThrow(/Validated object is not Boolean/);
        });
        it('do not throw error on boolean values', function () {
            validationHelper.boolean_(true);
            validationHelper.boolean_(false);
        });
    });
    describe('booleanNonStrict', function () {
        it('throw error on not non-strict boolean values', function () {
            expect(function () {
                validationHelper.booleanNonStrict('0');
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.booleanNonStrict({});
            }).toThrow(/Validated object is not Boolean/);
            expect(function () {
                validationHelper.booleanNonStrict('tru');
            }).toThrow(/Validated object is not Boolean/);
        });
        it('do not throw error on non-strict boolean values', function () {
            validationHelper.booleanNonStrict(true);
            validationHelper.booleanNonStrict(false);
            validationHelper.booleanNonStrict('true');
            validationHelper.booleanNonStrict('TRUE');
            validationHelper.booleanNonStrict('false');
            validationHelper.booleanNonStrict('FALSE');
        });
    });
    describe('booleanFalse', function () {
        it('throw error on not False values', function () {
            expect(function () {
                validationHelper.booleanFalse(true);
            }).toThrow(/Validated object is not False/);
            expect(function () {
                validationHelper.booleanFalse(undefined);
            }).toThrow(/Validated object is not False/);
            expect(function () {
                validationHelper.booleanFalse(null);
            }).toThrow(/Validated object is not False/);
            expect(function () {
                validationHelper.booleanFalse(NaN);
            }).toThrow(/Validated object is not False/);
            expect(function () {
                validationHelper.booleanFalse(0);
            }).toThrow(/Validated object is not False/);
            expect(function () {
                validationHelper.booleanFalse(1);
            }).toThrow(/Validated object is not False/);
        });
        it('do not throw error on False values', function () {
            validationHelper.booleanFalse(false);
        });
    });
    describe('number', function () {
        it('throw error on not a Number value', function () {
            expect(function () {
                validationHelper.number({});
            }).toThrow(/Validated object is not a number/);
            expect(function () {
                validationHelper.number(undefined);
            }).toThrow(/Validated object is not a number/);
            expect(function () {
                validationHelper.number(NaN);
            }).toThrow(/Validated object is not a number/);
            expect(function () {
                validationHelper.number(null);
            }).toThrow(/Validated object is not a number/);
            expect(function () {
                validationHelper.number('1');
            }).toThrow(/Validated object is not a number/);
        });
        it('do not throw error on Number value', function () {
            validationHelper.number(-1);
            validationHelper.number(0);
            validationHelper.number(1);
            validationHelper.number(1.5);
        });
    });
    describe('positiveNumber', function () {
        it('throw error on not a positive number value', function () {
            expect(function () {
                validationHelper.positiveNumber(0);
            }).toThrow(/Validated number is not positive/);
            expect(function () {
                validationHelper.positiveNumber(-1);
            }).toThrow(/Validated number is not positive/);
            expect(function () {
                validationHelper.positiveNumber(NaN);
            }).toThrow(/Validated object is not a number/);
        });
        it('do not throw error on a positive number value', function () {
            validationHelper.positiveNumber(0.1);
            validationHelper.positiveNumber(1);
            validationHelper.positiveNumber(1.5);
        });
    });
    describe('negativeNumber', function () {
        it('throw error on not a negative number value', function () {
            expect(function () {
                validationHelper.negativeNumber(0);
            }).toThrow(/Validated number is not negative/);
            expect(function () {
                validationHelper.negativeNumber(1);
            }).toThrow(/Validated number is not negative/);
            expect(function () {
                validationHelper.negativeNumber(NaN);
            }).toThrow(/Validated object is not a number/);
        });
        it('do not throw error on a negative number value', function () {
            validationHelper.negativeNumber(-0.1);
            validationHelper.negativeNumber(-1);
            validationHelper.negativeNumber(-1.5);
        });
    });
    describe('notNil', function () {
        it('throw error on null or undefined', function () {
            expect(function () {
                validationHelper.notNil(null);
            }).toThrow(/Validated object is null or undefined/);
            expect(function () {
                validationHelper.notNil(undefined);
            }).toThrow(/Validated object is null or undefined/);
        });
        it('do not throw error on not a null or undefined', function () {
            validationHelper.notNil(1);
            validationHelper.notNil(0);
            validationHelper.notNil(-1);
            validationHelper.notNil({});
            validationHelper.notNil('');
            validationHelper.notNil('a');
            validationHelper.notNil(true);
            validationHelper.notNil(false);
        });
    });
    describe('nil', function () {
        it('throw error on not a null or undefined', function () {
            expect(function () {
                validationHelper.nil(1);
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil(0);
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil(-1);
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil({});
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil('');
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil('a');
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil(true);
            }).toThrow(/Validated object is not null or undefined/);
            expect(function () {
                validationHelper.nil(false);
            }).toThrow(/Validated object is not null or undefined/);
        });
        it('do not throw error on null or undefined', function () {
            validationHelper.nil(null);
            validationHelper.nil(undefined);
        });
    });
    describe('notEmpty', function () {
        it('throw error on empty object', function () {
            expect(function () {
                validationHelper.notEmpty([]);
            }).toThrow(/Validated object is empty/);
            expect(function () {
                validationHelper.notEmpty('');
            }).toThrow(/Validated object is empty/);
            expect(function () {
                validationHelper.notEmpty(new Set());
            }).toThrow(/Validated object is empty/);
            expect(function () {
                validationHelper.notEmpty(null);
            }).toThrow(/Validated object is empty/);
            expect(function () {
                validationHelper.notEmpty(undefined);
            }).toThrow(/Validated object is empty/);
            expect(function () {
                validationHelper.notEmpty({});
            }).toThrow(/Validated object is empty/);
        });
        it('do not throw error on a not empty object', function () {
            validationHelper.notEmpty({ a: '' });
            validationHelper.notEmpty(' ');
            validationHelper.notEmpty('a');
            validationHelper.notEmpty([{}]);
            validationHelper.notEmpty(1);
        });
    });
    describe('string', function () {
        it('throw error on not a string', function () {
            expect(function () {
                validationHelper.string({});
            }).toThrow(/Validated object is not a string/);
            expect(function () {
                validationHelper.string(1);
            }).toThrow(/Validated object is not a string/);
            expect(function () {
                validationHelper.string(true);
            }).toThrow(/Validated object is not a string/);
            expect(function () {
                validationHelper.string([]);
            }).toThrow(/Validated object is not a string/);
            expect(function () {
                validationHelper.string(null);
            }).toThrow(/Validated object is not a string/);
            expect(function () {
                validationHelper.string(undefined);
            }).toThrow(/Validated object is not a string/);
        });
        it('do not throw error on a string', function () {
            validationHelper.string('');
            validationHelper.string(' ');
            validationHelper.string('a');
            validationHelper.string('1');
        });
    });
    describe('object', function () {
        it('throw error on not an object', function () {
            expect(function () {
                validationHelper.object_('s');
            }).toThrow(/Validated object is not an object/);
            expect(function () {
                validationHelper.object_(1);
            }).toThrow(/Validated object is not an object/);
            expect(function () {
                validationHelper.object_(true);
            }).toThrow(/Validated object is not an object/);
            expect(function () {
                validationHelper.object_(null);
            }).toThrow(/Validated object is not an object/);
            expect(function () {
                validationHelper.object_(undefined);
            }).toThrow(/Validated object is not an object/);
        });
        it('do not throw error on an object', function () {
            validationHelper.object_({});
            validationHelper.object_({ a: 'a' });
        });
    });
    describe('array', function () {
        it('throw error on not an array', function () {
            var expectedError = /Validated entity is not an array/;
            expect(function () {
                validationHelper.array('s');
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.array(1);
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.array(true);
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.array(null);
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.array(undefined);
            }).toThrow(expectedError);
        });
        it('do not throw error on an array', function () {
            validationHelper.array([]);
            validationHelper.array([{ a: 'a' }]);
            validationHelper.array(['a']);
        });
    });
    describe('function_', function () {
        it('throw error on not a function', function () {
            var expectedError = /Validated entity is not a function/;
            expect(function () {
                validationHelper.function_('s');
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.function_(1);
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.function_(true);
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.function_(null);
            }).toThrow(expectedError);
            expect(function () {
                validationHelper.function_(undefined);
            }).toThrow(expectedError);
        });
        it('do not throw error on a function', function () {
            validationHelper.function_(function () { });
            validationHelper.function_(function x() { });
            validationHelper.function_(/** @class */ (function () {
                function Dummy() {
                }
                return Dummy;
            }()));
        });
    });
    describe('inheritsFrom', function () {
        it('throw error on not an inheritor of a class', function () {
            var X = /** @class */ (function () {
                function X() {
                }
                return X;
            }());
            var X2 = /** @class */ (function (_super) {
                __extends(X2, _super);
                function X2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return X2;
            }(X));
            var Y = /** @class */ (function () {
                function Y() {
                }
                return Y;
            }());
            expect(function () {
                validationHelper.inheritsFrom(X, X2);
            }).toThrow(/Validated class does not inherit from X2/);
            expect(function () {
                validationHelper.inheritsFrom(X, Y);
            }).toThrow(/Validated class does not inherit from Y/);
            expect(function () {
                validationHelper.inheritsFrom(Object, Y);
            }).toThrow(/Validated class does not inherit from Y/);
            expect(function () {
                validationHelper.inheritsFrom(null, Y);
            }).toThrow(/Validated class does not inherit from Y/);
        });
        it('do not throw error on inheritor of a class', function () {
            var X = /** @class */ (function () {
                function X() {
                }
                return X;
            }());
            var X2 = /** @class */ (function (_super) {
                __extends(X2, _super);
                function X2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return X2;
            }(X));
            validationHelper.inheritsFrom(X, X);
            validationHelper.inheritsFrom(X2, X2);
            validationHelper.inheritsFrom(X2, X);
        });
    });
    describe('instanceOf', function () {
        it('throw error on not an instance of a class', function () {
            var X = /** @class */ (function () {
                function X() {
                }
                return X;
            }());
            var X2 = /** @class */ (function (_super) {
                __extends(X2, _super);
                function X2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return X2;
            }(X));
            var Y = /** @class */ (function () {
                function Y() {
                }
                return Y;
            }());
            expect(function () {
                validationHelper.instanceOf(new X(), X2);
            }).toThrow(/Validated object is not an instance of X2/);
            expect(function () {
                validationHelper.instanceOf(new X(), Y);
            }).toThrow(/Validated object is not an instance of Y/);
            expect(function () {
                validationHelper.instanceOf({}, Y);
            }).toThrow(/Validated object is not an instance of Y/);
            expect(function () {
                validationHelper.instanceOf(null, Y);
            }).toThrow(/Validated object is not an instance of Y/);
        });
        it('do not throw error on an instance of a class', function () {
            var X = /** @class */ (function () {
                function X() {
                }
                return X;
            }());
            var X2 = /** @class */ (function (_super) {
                __extends(X2, _super);
                function X2() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return X2;
            }(X));
            validationHelper.instanceOf(new X(), X);
            validationHelper.instanceOf(new X2(), X2);
            validationHelper.instanceOf(new X2(), X);
        });
    });
    describe('lessThan', function () {
        it('throw error on not less than', function () {
            expect(function () {
                validationHelper.lessThan(1, 1);
            }).toThrow(/Validated number 1 is not less than the threshold 1/);
            expect(function () {
                validationHelper.lessThan(2, 1);
            }).toThrow(/Validated number 2 is not less than the threshold 1/);
        });
        it('do not throw error on less than', function () {
            validationHelper.lessThan(1, 2);
            validationHelper.lessThan(1, 1.1);
        });
    });
    describe('greaterThan', function () {
        it('throw error on not greater than', function () {
            expect(function () {
                validationHelper.greaterThan(1, 1);
            }).toThrow(/Validated number 1 is not greater than the threshold 1/);
            expect(function () {
                validationHelper.greaterThan(0, 1);
            }).toThrow(/Validated number 0 is not greater than the threshold 1/);
        });
        it('do not throw error on greater than', function () {
            validationHelper.greaterThan(2, 1);
            validationHelper.greaterThan(1.1, 1);
        });
    });
    describe('equal', function () {
        it('throw error on not equal to', function () {
            expect(function () {
                validationHelper.equal(1, 2);
            }).toThrow(/Validated entity 1 is not equal to 2/);
            expect(function () {
                validationHelper.equal({}, {});
            }).toThrow('Validated entity [object Object] is not equal to [object Object]');
            expect(function () {
                validationHelper.equal('a', 'b');
            }).toThrow(/Validated entity a is not equal to b/);
        });
        it('do not throw error on equal to', function () {
            validationHelper.equal(1, 1);
            validationHelper.equal('dummy', 'dummy');
            var object = {};
            validationHelper.equal(object, object);
            validationHelper.equal(null, null);
            validationHelper.equal(undefined, undefined);
        });
    });
    describe('ValidationError', function () {
        it('throws ValidationError', function () {
            expect(function () {
                validationHelper.string(undefined);
            }).toThrow(new ValidationError_1.default('Validated object is not a string'));
        });
    });
});
//# sourceMappingURL=validation.helper.spec.js.map