"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationError_1 = __importDefault(require("./ValidationError"));
var zoology_1 = require("zoology");
/**
 * Checks value not to be null or undefined
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function notNil(validatedObject, errorText) {
    if (zoology_1.isNil(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is null or undefined');
    }
    return validatedObject;
}
exports.notNil = notNil;
/**
 * Checks value to be null or undefined
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function nil(validatedObject, errorText) {
    if (!zoology_1.isNil(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is not null or undefined');
    }
    return validatedObject;
}
exports.nil = nil;
/**
 * Checks value not to be an empty Object, String or Array
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function notEmpty(validatedObject, errorText) {
    if (zoology_1.isEmpty(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is empty');
    }
    return validatedObject;
}
exports.notEmpty = notEmpty;
/**
 * Checks value to be a number
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
function number(validatedObject, errorText) {
    if (!zoology_1.isFinite(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is not a number');
    }
    return validatedObject;
}
exports.number = number;
/**
 * Checks value to be a number that is larger than 0
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
function positiveNumber(validatedObject, errorText) {
    number(validatedObject);
    if (validatedObject <= 0) {
        throw new ValidationError_1.default(errorText || 'Validated number is not positive');
    }
    return validatedObject;
}
exports.positiveNumber = positiveNumber;
/**
 * Checks value to be a number that is less than the specified number
 * @param {*} validatedObject
 * @param {number} threshold - if validated number is equal or larger than this, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
function lessThan(validatedObject, threshold, errorText) {
    number(validatedObject);
    number(threshold, 'Threshold is not a number');
    if (validatedObject >= threshold) {
        throw new ValidationError_1.default(errorText || "Validated number " + validatedObject + " is not less than the threshold " + threshold);
    }
    return validatedObject;
}
exports.lessThan = lessThan;
/**
 * Checks value to be a number that is greater than specified number
 * @param {*} validatedObject
 * @param {number} threshold - if validated number is equal or less than this, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
function greaterThan(validatedObject, threshold, errorText) {
    number(validatedObject);
    number(threshold, 'Threshold is not a number');
    if (validatedObject <= threshold) {
        throw new ValidationError_1.default(errorText || "Validated number " + validatedObject + " is not greater than the threshold " + threshold);
    }
    return validatedObject;
}
exports.greaterThan = greaterThan;
/**
 * Checks value to equal specified entity (=== comparison)
 * @param {*} validatedEntity
 * @param {*} expectedEqualTo - if validated entity is not equal to this, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
function equal(validatedEntity, expectedEqualTo, errorText) {
    if (validatedEntity !== expectedEqualTo) {
        throw new ValidationError_1.default(errorText || "Validated entity " + validatedEntity + " is not equal to " + expectedEqualTo);
    }
    return validatedEntity;
}
exports.equal = equal;
/**
 * Checks value to be a number that is less than 0
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
function negativeNumber(validatedObject, errorText) {
    number(validatedObject);
    if (validatedObject >= 0) {
        throw new ValidationError_1.default(errorText || 'Validated number is not negative');
    }
    return validatedObject;
}
exports.negativeNumber = negativeNumber;
/**
 * Checks value to be a string
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {String} validatedObject
 */
function string(validatedObject, errorText) {
    if (!zoology_1.isString(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is not a string');
    }
    return validatedObject;
}
exports.string = string;
/**
 * Checks value to be a True boolean
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {boolean} validatedObject
 */
function booleanTrue(validatedObject, errorText) {
    if (!zoology_1.isBoolean(validatedObject) || !validatedObject) {
        throw new ValidationError_1.default(errorText || 'Validated object is not True');
    }
    return validatedObject;
}
exports.booleanTrue = booleanTrue;
/**
 * Checks value to be an instance of Date
 * @param {*} validatedEntity
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {boolean} validatedObject
 */
function date(validatedEntity, errorText) {
    if (!zoology_1.isDate(validatedEntity)) {
        throw new ValidationError_1.default(errorText || 'Validated object is not Date');
    }
    return validatedEntity;
}
exports.date = date;
/**
 * Checks value to be a boolean or a (case-insensitive) 'true' or 'false' string
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function booleanNonStrict(validatedObject, errorText) {
    if (!zoology_1.isBoolean(validatedObject)) {
        if (!zoology_1.isString(validatedObject) ||
            (validatedObject.toLowerCase() !== 'false' && validatedObject.toLowerCase() !== 'true')) {
            throw new ValidationError_1.default(errorText || 'Validated object is not Boolean');
        }
    }
    return validatedObject;
}
exports.booleanNonStrict = booleanNonStrict;
/**
 * Checks value to be a boolean
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function boolean_(validatedObject, errorText) {
    if (!zoology_1.isBoolean(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is not Boolean');
    }
    return validatedObject;
}
exports.boolean_ = boolean_;
/**
 * Checks value to be a False boolean
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {boolean} validatedObject
 */
function booleanFalse(validatedObject, errorText) {
    if (!zoology_1.isBoolean(validatedObject) || validatedObject) {
        throw new ValidationError_1.default(errorText || 'Validated object is not False');
    }
    return validatedObject;
}
exports.booleanFalse = booleanFalse;
/**
 * Checks value to be a truthy entity
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function truthy(validatedObject, errorText) {
    if (!validatedObject) {
        throw new ValidationError_1.default(errorText || 'Validated object is not truthy');
    }
    return validatedObject;
}
exports.truthy = truthy;
/**
 * Checks value to be a falsy entity
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
function falsy(validatedObject, errorText) {
    if (validatedObject) {
        throw new ValidationError_1.default(errorText || 'Validated object is not falsy');
    }
    return validatedObject;
}
exports.falsy = falsy;
/**
 * Checks value to be a function
 * @param {*} validatedEntity
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedEntity
 */
function function_(validatedEntity, errorText) {
    if (!zoology_1.isFunction(validatedEntity)) {
        throw new ValidationError_1.default(errorText || 'Validated entity is not a function');
    }
    return validatedEntity;
}
exports.function_ = function_;
/**
 * Checks object to have at least a given set of properties defined
 * @param {*} validatedObject
 * @param {String[]} validatedProperties - names of properties which existence should be checked
 * @returns {*} validatedObject
 */
function withProperties(validatedObject, validatedProperties) {
    notNil(validatedObject);
    var undefinedProperties = validatedProperties.filter(function (property) {
        return !validatedObject.hasOwnProperty(property);
    });
    if (!zoology_1.isEmpty(undefinedProperties)) {
        throw new ValidationError_1.default("Validated object doesn't have properties: " + undefinedProperties);
    }
    return validatedObject;
}
exports.withProperties = withProperties;
/**
 * Checks value to be an object
 * @param validatedObject
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
function object_(validatedObject, errorText) {
    if (!zoology_1.isObject(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated object is not an object');
    }
    return validatedObject;
}
exports.object_ = object_;
/**
 * Checks value to be an object
 * @param validatedObject
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
function array(validatedObject, errorText) {
    if (!Array.isArray(validatedObject)) {
        throw new ValidationError_1.default(errorText || 'Validated entity is not an array');
    }
    return validatedObject;
}
exports.array = array;
/**
 * Checks value to be an instance of a given class
 * @param validatedObject
 * @param {class} expectedClass
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
function instanceOf(validatedObject, expectedClass, errorText) {
    if (!(validatedObject instanceof expectedClass)) {
        throw new ValidationError_1.default(errorText || "Validated object is not an instance of " + expectedClass.name);
    }
    return validatedObject;
}
exports.instanceOf = instanceOf;
/**
 * Checks value to inherit from a given class or to be that class
 * @param validatedClass
 * @param {class} expectedParentClass
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
function inheritsFrom(validatedClass, expectedParentClass, errorText) {
    if (
    //fail-fast if it is nil
    !validatedClass ||
        //lenient check whether class directly or indirectly inherits from expected class
        (!(validatedClass.prototype instanceof expectedParentClass) && validatedClass !== expectedParentClass)) {
        throw new ValidationError_1.default(errorText || "Validated class does not inherit from " + expectedParentClass.name);
    }
    return validatedClass;
}
exports.inheritsFrom = inheritsFrom;
//# sourceMappingURL=validation.helper.js.map